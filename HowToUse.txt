Introduction:
	As I explained, beginners who is new to computing may assume that freeram would always only take the address being supplied (in the define), but not the potential addresses
	afterwards. They did not know that each address is a byte, and that multi-byte would take that address and n-1 bytes afterwards.

	Example: One user experienced an issue with using directional quake patch and the wall kick patch: https://www.smwcentral.net/?p=section&a=details&id=18776 (see comments)
	Looking at the 2 patches, the Directional quake patch takes TWO bytes of memory, under the default settings (set to use $60, which is $7E0060), it would take $7E0060
	*and* $7E0061. The wallkick patch's default RAM is:
	
		!flags			= $61		; The wallkick flags. (RAM)
		!no_back_timer		= $62		; The timer for not moving back. (RAM)
		!temp_y_spd		= $63		; The temporary Y speed. (RAM)
		
	Notice that !flags is using $61. Therefore $7E0061 is being reused by entirely unrelated patches, which is why both patches don't work without changing the
	defines so they don't conflict.
	
	You may think this tool is redundant since people can simply create a txt file, list the RAM in the following formats (assuming you edited the wallkick patch
	defines to use alternative unused RAM addresses) as they insert each patch:
		List each RAM, showing the number of bytes and ending address (assuming you fixed !flags to use a safer address, not $61):
			7E0058	1 byte		Used by wall kick patch
			7E0060	2 bytes/7E0061	Used by directional quake patch
			7E0062	2 bytes/7E0063	Used by wall kick patch
			
			You can CTRL+F to find single-byte used RAM easily.
			You can CTRL+F to find the starting address and ending address (if you write the ending address) without flaw if they take up 2 bytes.
			
			However, it is still possible you could enter a RAM, it doesn't find it, assume it is unused, and use that RAM,
			despite potentially, a data, starting at an address before it, could use that address. Here is a made-up example:
			
				7E0060	3 bytes/7E0062		Used by patch A
			
			And I try searching for $7E0061, it fails, despite $7E0060, $7E0061, and $7E0062 is used by patch A. This problem will
			happen if at least 3 bytes are taken, since the middle bytes (excluding the starting and ending addresses) are not
			shown.
		What about this method? We list each contiguous byte of RAM addresses (including if a given data takes multiple bytes), one byte after another
		like so:
			Using the primary example:
				7E0058	;>Used by wall kick patch
				7E0060	;\Used by directional quake patch
				7E0061	;/
				7E0062	;\Used by wall kick patch
				7E0063	;/
			Or using the 3-byte example recently:
				7E0060	;\Used by patch A
				7E0061	;|
				7E0062	;/
			
			While this is good for CTRL+F, sometimes, the user may have to edit the patches some more if they changed the settings that would
			relocate the data, or increase the number of bytes a given data would use. This results in having to edit all the affected listed
			addresses. This is also clunky in terms that if there is a patch that takes a huge number of bytes, would require scrolling long
			distances.
		
			This is even more of a problem that if you have lots of ASM stuff inserted into your game, and happen to have a large number of used
			RAM being overlapped, would have to manually and tediously compare each and every one of them listed to see if they overlap.
	So I found a way on how to automate and format the list of used RAM, making it easier to find potential problems with RAM managing.
How to use:
	As you keep installing any ASM-related resources in your hack, you would note each RAM addresses used by the said ASM stuff, like any person who tracks
	the inserted patches, including collaboration hacks. Here is a simple example:
	1 byte of $7E0060 is used for patch A and 2 bytes at $7E0061 is used for patch B. You would note them like this in a txt file:
;---------------------
7E0060	1	Patch A
7E0061	2	Patch B
;---------------------
	Blank lines, lines with just any whitespace characters, or lines with zero or more whitespace character followed by a semicolon will be ignored (ASM-styled comments
	will not break this). It first break each line into an element in an array (uses a [string.split('\n')] to convert into line-array), then later splits them by tab
	character ([.split('\t')]) to get the data of each RAM. If there any lines with an invalid format, it will error out.
	
	This is the format the javascript (JS) code would allow. Of course, you can supply a range instead of number of bytes by having the second number (after the first tab character)
	be an address, preceded with a hyphen symbol (-XXXXXX (or -$XXXXXX)).
	
	Then if you are installing another patch, you make another entry of RAM of that patch into the txt file. Then copy the entire list, and paste it into the “text area” of
	the HTML javascript. What will happen is at the bottom of the HTML, shows a list of the RAM you entered, but with some additional information:
	
		An uneditable textarea, for easy copying (select it, CTRL+A, CTRL+C). Useful if you wanted to take that formatted list, edit, and feed that into the JS tool.
		
		An HTML table, with colors. A clone of the above, but much cleaner format due to plaintext limitations (despite being tab-separated values, the data may not
		always be aligned on the columns). Green is the submitted address you entered without any overlaps ("UserEnteredAddress"), red also means your submitted address
		is overlapping (or conflicting) with another, and grey means a gap between 2 closest ranges to one another exists (if at least 1 byte in between them exist).
		
		Filtering. Just below the sort setting, features a UI element that lets you filter to look for address based on their status (address you sent w/o overlaps, overlaps,
		and gaps). This makes searching for various things like unused RAM and/or conflicting used RAM much easier.
	
	If you used the first example (wallkick + directional quake):
;---------------------
7E0060	2	Used by directional quake patch (!Freeram_DirQuake_Layer1XDisplacement)
7E0061	1	Used by wallkick patch (!flags)
7E0062	1	Used by wallkick patch (!no_back_timer)
7E0063	1	Used by wallkick patch (!temp_y_spd)
;---------------------
	It should mark the two entries in red; the directional quake taking $7E0060-$7E0061 for !Freeram_DirQuake_Layer1XDisplacement and the wallkick taking $7E0061 by !flags.
Note:
	It is possible that a RAM may be re-used to save memory without issues. This happens when a given RAM address is not being used by multiple unrelated things at the same time:
	You may use it in a per-level effects, such as a custom timer only used in certain levels, but that same address is used as a flag or a counter in other levels. As long as
	the game does not have to remember it spanning across the game (such as your HP if you want it to keep its value throughout specific levels but not on overworld maps).
	Same applies to custom scratch RAM (with memory more than 16 bytes; $7E0000-$7E000F, like my Graphical Bar). If this is the case, you can:
		-Merge the info into one on the list. Technically, there is no character limit on the description, you could make it say “Used by Patch A and Patch B”.
		-For per-level used RAM that needs to be retained for the level (like a timer), simply have a “local used-RAM list” separated from the “global used-RAM list”.
		 (local means used in specific areas in the game, global is the entire game that is always used for a given purpose and only that purpose).
Useful tip(s):
	It's possible to make asar output a txt file in the format the JS accepts this, here's how to do it:
	
	Create an ASM defines file (example, DefineTest.asm), or have it in the ASM file with the code doing this:
;---------------------
!Freeram_test = $7E0060	;>Lets assume this takes 4 bytes.
!Size	= 4		;>Some patches or any other ASM resource may have ram with a certain size depending on the settings.

print "$", hex(!Freeram_test), "	", dec(!Size), "	Description here"
;---------------------
	Then create a batch file (test.bat), in that file to contain this text (each space is a parameter, and a newline submits the data):
;---------------------
[path to asar.exe] [path to game file] > [path location to create the txt file]
pause
;---------------------
If there are spaces in the file path, wrap the whole path in quotes. Then save, run it (should open the command prompt).
Example:
;---------------------
"C:\Users\GreenHammerBro\Desktop\smw romhacking\General Tools\asar181\asar.exe" "C:\Users\GreenHammerBro\Desktop\smw romhacking\Submission\AddresserTool\DefineTest.asm" "C:\Users\GreenHammerBro\Desktop\smw romhacking\Submission\AddresserTool\a.smc" >> "C:\Users\RedBro\Desktop\smw romhacking\Submission\AddresserTool\Output.txt"
pause
;---------------------
And a file should appear with the RAM info (at [path location to create the txt file]). Note: this HAS to be outputted as a text file, the command prompt will convert it into 5 regular space characters.


Credits:
	HammerBrother: Created the tool
	dtothefourth (https://www.smwcentral.net/?p=profile&id=37441 ): Made or knows the code that makes adding the tab character much easier.