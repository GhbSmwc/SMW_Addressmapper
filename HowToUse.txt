Introduction:
	As I explained, beginners who is new to computing may assume that freeram would always only take the address being supplied (in the define), but not the addresses
	afterwards. They did not know that each address is a byte, and that multi-byte would take that address and n-1 bytes afterwards.

	Example: One user experienced an issue with using directional quake patch and the wall kick patch: https://www.smwcentral.net/?p=section&a=details&id=18776
	Looking at the patches, the Directional quake patch takes TWO bytes of memory, under the default settings, it would take $7E0060 and $7E0061. The wallkick patch's
	default RAM is:
	
		!flags			= $61		; The wallkick flags. (RAM)
		!no_back_timer		= $62		; The timer for not moving back. (RAM)
		!temp_y_spd		= $63		; The temporary Y speed. (RAM)
		
	Notice that !flags is using $61. Therefore $7E0061 is being reused by entirely unrelated patches, which is why both patches don't work.
	
	You may think this tool is redundant since people can simply create a txt file, in the following formats (assuming you edited the wallkick patch
	defines to use alternative unused RAM addresses):
		List each RAM, but only by starting address:
			7E0058	1 byte		Used by wall kick patch
			7E005C	1 byte		Used by wall kick patch
			7E0060	2 bytes/7E0061	Used by directional quake patch
			7E0062	2 bytes/7E0063	Used by wall kick patch
			
			This is good, but not all empty RAMs 1-byte large, and there's a chance that some of them are partially used. If you try searching for 7E0063,
			via CTRL+F for example, will not find it, as there is no direct text explicitly saying that address is used (2 bytes at 7E0062 is used). You would
			have to do maths (add an address by how many bytes, and the result is an address beyond the last byte) to find the starting empty RAM.
		What about this method? We list each byte of RAM addresses (including if a given data takes multiple bytes) like so:
			7E0058	;>Used by wall kick patch
			7E005C	;>Used by wall kick patch
			7E0060	;\Used by directional quake patch
			7E0061	;/
			7E0062	;\Used by wall kick patch
			7E0063	;/
			
			While this is good for CTRL+F, sometimes, the user may have to edit the patches some more if they changed the settings that would
			increase the number of bytes a given data would use. This results in having to edit all the affected listed address. This is also
			clunky in terms that if there is a patch that takes a huge number of bytes, would require scrolling long distances.
	So I found a way on how to automate and format the list of used RAM, making it easier to find potential problems with RAM managing.
How to use:
	As you keep installing any ASM-related resources in your hack, you would note each RAM addresses used by the said ASM stuff. Here is a simple example:
	1 byte of $7E0060 is used for patch A and 2 bytes at $7E0061 is used for patch B. You would note them like this:
;---------------------
7E0060	1	Patch A
7E0061	2	Patch B
;---------------------
	This is the format the javascript would allow. Of course, you can supply a range instead of number of bytes by having the second number (after the first tab character)
	be -XXXXXX (or -$XXXXXX) (note the hyphen denotes a range, not size).
	
	Then if you are installing another patch, you enter another entry of RAM of that patch into the list. Then copy the entire list, and paste it into the “text area” of
	the HTML javascript. What will happen is at the bottom of the HTML, shows 2 types of information:
	
		The left panel shows what you've entered, sorted either by starting address or their sizes. If there are conflicts (2 or more patches reusing RAM),
		they're colored red with the starting address box having the text “Overlap detected!”. You can then CTRL+F to check and find which ones have those
		issues, which suggest they will glitch. If none found on the list, then there is no conflicts.
		
			Also on the left panel displays gaps when there are 2 ranges with unused bytes in between. Useful if you want to find potentially-unused RAM
			and place a new usage located a byte after the previous range's last byte.
		
		The right panel, same as before, but filtered by gaps.