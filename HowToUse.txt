Introduction:
	As I explained, beginners who is new to computing may assume that freeram would only take the address being supplied (in the define), but not the addresses
	afterwards. They did not know that each address is a byte, and that multi-byte would take that address and n-1 bytes afterwards.

	Example: One user experienced an issue with using directional quake patch and the wall kick patch: https://www.smwcentral.net/?p=section&a=details&id=18776
;---------------------
;Format: StartAddress	Size	Description
7E0060	2	Used by Directional Quake v2.0
7E0061	1	Used by the wall kick patch
;---------------------
How to use:
	As you keep installing any ASM-related resources in your hack, you would note each RAM addresses used by the said ASM stuff. Here is a simple example:
	1 byte of $7E0060 is used for patch A and 2 bytes at $7E0061 is used for patch B. You would note them like this:
;---------------------
7E0060	1	Patch A
7E0061	2	Patch B
;---------------------
	This is the format the javascript would allow. Of course, you can supply a range instead of number of bytes by having the second number (after the first tab character)
	be -XXXXXX (or -$XXXXXX) (note the hyphen denotes a range).
	
	Then if you are installing another patch, you enter another entry of RAM of that patch into the list. Then copy the entire list, and paste it into the “text area” of
	the HTML javascript. What will happen is at the bottom of the HTML, shows 2 types of information:
	
		The left panel shows what you've entered, sorted either by starting address or their sizes. If there are conflicts (2 or more patches reusing RAM),
		they're colored red with the starting address box having the text “Overlap detected!”. You can then CTRL+F to check and find which ones have those
		issues, which suggest they will glitch.
		
			Also on the left panel displays gaps when there are 2 ranges with unused bytes in between. Useful if you want to find potentially-unused RAM.
		
		The right panel, same as before, but filtered by gaps.